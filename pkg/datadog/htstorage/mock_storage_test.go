// Code generated by mockery 2.7.4. DO NOT EDIT.

package htstorage

import (
	context "context"

	prompb "github.com/prometheus/prometheus/prompb"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, hostName
func (_m *MockStorage) Get(ctx context.Context, hostName string) ([]prompb.Label, error) {
	ret := _m.Called(ctx, hostName)

	var r0 []prompb.Label
	if rf, ok := ret.Get(0).(func(context.Context, string) []prompb.Label); ok {
		r0 = rf(ctx, hostName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]prompb.Label)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, hostName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, from
func (_m *MockStorage) GetAll(ctx context.Context, from time.Time) (map[string]Host, error) {
	ret := _m.Called(ctx, from)

	var r0 map[string]Host
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) map[string]Host); ok {
		r0 = rf(ctx, from)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]Host)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, from)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, hostName, labels
func (_m *MockStorage) Set(ctx context.Context, hostName string, labels []prompb.Label) error {
	ret := _m.Called(ctx, hostName, labels)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []prompb.Label) error); ok {
		r0 = rf(ctx, hostName, labels)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
