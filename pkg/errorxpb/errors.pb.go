// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errorx/v1/errors.proto

package errorxpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ErrorxType lists all of the errorx types that we have. The conversion
// function ignores the GRPC status type when doing the conversion.
type ErrorxType int32

const (
	UNKNOWN                ErrorxType = 0
	INTERNAL               ErrorxType = 1
	BAD_REQUEST            ErrorxType = 2
	REQUIRES_PROXY_REQUEST ErrorxType = 3
	RATE_LIMITED           ErrorxType = 4
	DISABLED               ErrorxType = 5
	UNIMPLEMENTED          ErrorxType = 6
	UNPROCESSABLE_ENTITY   ErrorxType = 7
	CONFLICT               ErrorxType = 8
	TOO_MANY_REQUESTS      ErrorxType = 9
	UNSUPPORTED_MEDIA_TYPE ErrorxType = 10
)

var ErrorxType_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "INTERNAL",
	2:  "BAD_REQUEST",
	3:  "REQUIRES_PROXY_REQUEST",
	4:  "RATE_LIMITED",
	5:  "DISABLED",
	6:  "UNIMPLEMENTED",
	7:  "UNPROCESSABLE_ENTITY",
	8:  "CONFLICT",
	9:  "TOO_MANY_REQUESTS",
	10: "UNSUPPORTED_MEDIA_TYPE",
}

var ErrorxType_value = map[string]int32{
	"UNKNOWN":                0,
	"INTERNAL":               1,
	"BAD_REQUEST":            2,
	"REQUIRES_PROXY_REQUEST": 3,
	"RATE_LIMITED":           4,
	"DISABLED":               5,
	"UNIMPLEMENTED":          6,
	"UNPROCESSABLE_ENTITY":   7,
	"CONFLICT":               8,
	"TOO_MANY_REQUESTS":      9,
	"UNSUPPORTED_MEDIA_TYPE": 10,
}

func (ErrorxType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5bdbe86b1692d2c6, []int{0}
}

// ErrorDetails are set for GRPC Status responses to provide extra context for
// conversion back to an errorx type.
type ErrorDetails struct {
	Type ErrorxType `protobuf:"varint,1,opt,name=type,proto3,enum=errorx.ErrorxType" json:"type,omitempty"`
	// Reason is used by RequiresProxyRequest for logging.
	Reason string `protobuf:"bytes,2,opt,name=Reason,proto3" json:"Reason,omitempty"`
}

func (m *ErrorDetails) Reset()      { *m = ErrorDetails{} }
func (*ErrorDetails) ProtoMessage() {}
func (*ErrorDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bdbe86b1692d2c6, []int{0}
}
func (m *ErrorDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorDetails.Merge(m, src)
}
func (m *ErrorDetails) XXX_Size() int {
	return m.Size()
}
func (m *ErrorDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorDetails proto.InternalMessageInfo

func (m *ErrorDetails) GetType() ErrorxType {
	if m != nil {
		return m.Type
	}
	return UNKNOWN
}

func (m *ErrorDetails) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterEnum("errorx.ErrorxType", ErrorxType_name, ErrorxType_value)
	golang_proto.RegisterEnum("errorx.ErrorxType", ErrorxType_name, ErrorxType_value)
	proto.RegisterType((*ErrorDetails)(nil), "errorx.ErrorDetails")
	golang_proto.RegisterType((*ErrorDetails)(nil), "errorx.ErrorDetails")
}

func init() { proto.RegisterFile("errorx/v1/errors.proto", fileDescriptor_5bdbe86b1692d2c6) }
func init() { golang_proto.RegisterFile("errorx/v1/errors.proto", fileDescriptor_5bdbe86b1692d2c6) }

var fileDescriptor_5bdbe86b1692d2c6 = []byte{
	// 397 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x91, 0x4f, 0x8e, 0xd3, 0x30,
	0x18, 0xc5, 0xe3, 0x61, 0xc8, 0xcc, 0x78, 0x02, 0x78, 0x2c, 0xa8, 0xaa, 0x59, 0x58, 0x23, 0x16,
	0xa8, 0x42, 0x22, 0x11, 0x70, 0x82, 0xb4, 0x71, 0x25, 0x8b, 0xc4, 0x09, 0x8e, 0x23, 0x28, 0x9b,
	0xa8, 0x41, 0x21, 0x54, 0xfc, 0x49, 0x94, 0xa6, 0xa8, 0xdd, 0x71, 0x04, 0x8e, 0xc1, 0x31, 0x58,
	0xb2, 0xec, 0xb2, 0x4b, 0xea, 0x6c, 0x58, 0xf6, 0x08, 0x28, 0x0e, 0xea, 0xec, 0xbe, 0xe7, 0xf7,
	0x7b, 0x9f, 0x3f, 0xe9, 0xc1, 0x41, 0x5e, 0xd7, 0x65, 0xbd, 0x76, 0xbe, 0x3d, 0x77, 0xf4, 0xb4,
	0xb4, 0xab, 0xba, 0x6c, 0x4a, 0x6c, 0xf6, 0xef, 0xd7, 0xcf, 0x8a, 0x45, 0xf3, 0x71, 0x95, 0xd9,
	0xef, 0xcb, 0x2f, 0x4e, 0x51, 0x16, 0xa5, 0xa3, 0xed, 0x6c, 0xf5, 0x41, 0x2b, 0x2d, 0xf4, 0xd4,
	0xc7, 0x1e, 0x73, 0x68, 0xd1, 0x2e, 0xe8, 0xe5, 0xcd, 0x7c, 0xf1, 0x79, 0x89, 0x9f, 0xc0, 0xd3,
	0x66, 0x53, 0xe5, 0x43, 0x70, 0x03, 0x46, 0xf7, 0x5f, 0x60, 0xbb, 0xdf, 0x6a, 0x6b, 0x66, 0x2d,
	0x37, 0x55, 0x2e, 0xb4, 0x8f, 0x07, 0xd0, 0x14, 0xf9, 0x7c, 0x59, 0x7e, 0x1d, 0x9e, 0xdc, 0x80,
	0xd1, 0x85, 0xf8, 0xaf, 0x9e, 0x2a, 0x00, 0xe1, 0x2d, 0x8c, 0x2f, 0xe1, 0x59, 0xc2, 0x5f, 0xf1,
	0xf0, 0x0d, 0x47, 0x06, 0xb6, 0xe0, 0x39, 0xe3, 0x92, 0x0a, 0xee, 0xfa, 0x08, 0xe0, 0x07, 0xf0,
	0x72, 0xec, 0x7a, 0xa9, 0xa0, 0xaf, 0x13, 0x1a, 0x4b, 0x74, 0x82, 0xaf, 0xe1, 0xa0, 0x13, 0x4c,
	0xd0, 0x38, 0x8d, 0x44, 0xf8, 0x76, 0x76, 0xf4, 0xee, 0x60, 0x04, 0x2d, 0xe1, 0x4a, 0x9a, 0xfa,
	0x2c, 0x60, 0x92, 0x7a, 0xe8, 0xb4, 0x5b, 0xe6, 0xb1, 0xd8, 0x1d, 0xfb, 0xd4, 0x43, 0x77, 0xf1,
	0x15, 0xbc, 0x97, 0x70, 0x16, 0x44, 0x3e, 0x0d, 0x28, 0xef, 0x00, 0x13, 0x0f, 0xe1, 0xc3, 0x84,
	0x47, 0x22, 0x9c, 0xd0, 0x58, 0x63, 0x29, 0xe5, 0x92, 0xc9, 0x19, 0x3a, 0xeb, 0xa2, 0x93, 0x90,
	0x4f, 0x7d, 0x36, 0x91, 0xe8, 0x1c, 0x3f, 0x82, 0x57, 0x32, 0x0c, 0xd3, 0xc0, 0xe5, 0xc7, 0x0f,
	0x63, 0x74, 0xd1, 0x5d, 0x93, 0xf0, 0x38, 0x89, 0xa2, 0x50, 0x48, 0xea, 0xa5, 0x01, 0xf5, 0x98,
	0x9b, 0xca, 0x59, 0x44, 0x11, 0x1c, 0x4f, 0xb7, 0x7b, 0x62, 0xec, 0xf6, 0xc4, 0x38, 0xec, 0x09,
	0xf8, 0xae, 0x08, 0xf8, 0xa9, 0x08, 0xf8, 0xad, 0x08, 0xd8, 0x2a, 0x02, 0xfe, 0x28, 0x02, 0xfe,
	0x2a, 0x62, 0x1c, 0x14, 0x01, 0x3f, 0x5a, 0x62, 0xfc, 0x6a, 0x09, 0xd8, 0xb6, 0xc4, 0xd8, 0xb5,
	0xc4, 0x78, 0x67, 0x55, 0x9f, 0x8a, 0xbe, 0xb7, 0x75, 0x95, 0x65, 0xa6, 0xee, 0xe0, 0xe5, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0xde, 0x0e, 0x21, 0xd4, 0x01, 0x00, 0x00,
}

func (x ErrorxType) String() string {
	s, ok := ErrorxType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *ErrorDetails) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorDetails)
	if !ok {
		that2, ok := that.(ErrorDetails)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Reason != that1.Reason {
		return false
	}
	return true
}
func (this *ErrorDetails) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&errorxpb.ErrorDetails{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Reason: "+fmt.Sprintf("%#v", this.Reason)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringErrors(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ErrorDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ErrorDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reason) > 0 {
		i -= len(m.Reason)
		copy(dAtA[i:], m.Reason)
		i = encodeVarintErrors(dAtA, i, uint64(len(m.Reason)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintErrors(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintErrors(dAtA []byte, offset int, v uint64) int {
	offset -= sovErrors(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ErrorDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovErrors(uint64(m.Type))
	}
	l = len(m.Reason)
	if l > 0 {
		n += 1 + l + sovErrors(uint64(l))
	}
	return n
}

func sovErrors(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErrors(x uint64) (n int) {
	return sovErrors(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ErrorDetails) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorDetails{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Reason:` + fmt.Sprintf("%v", this.Reason) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringErrors(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ErrorDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ErrorxType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrors
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrors
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrors(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErrors
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrors(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrors
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrors
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrors
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErrors
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErrors
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErrors        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrors          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErrors = fmt.Errorf("proto: unexpected end of group")
)
