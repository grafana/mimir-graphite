// Code generated by mockery v2.43.2. DO NOT EDIT.

package remotereadmock

import (
	context "context"

	annotations "github.com/prometheus/prometheus/util/annotations"

	labels "github.com/prometheus/prometheus/model/labels"

	mock "github.com/stretchr/testify/mock"

	storage "github.com/prometheus/prometheus/storage"
)

// StorageQuerierInterface is an autogenerated mock type for the StorageQuerierInterface type
type StorageQuerierInterface struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *StorageQuerierInterface) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LabelNames provides a mock function with given fields: ctx, matchers
func (_m *StorageQuerierInterface) LabelNames(ctx context.Context, matchers ...*labels.Matcher) ([]string, annotations.Annotations, error) {
	_va := make([]interface{}, len(matchers))
	for _i := range matchers {
		_va[_i] = matchers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LabelNames")
	}

	var r0 []string
	var r1 annotations.Annotations
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, ...*labels.Matcher) ([]string, annotations.Annotations, error)); ok {
		return rf(ctx, matchers...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...*labels.Matcher) []string); ok {
		r0 = rf(ctx, matchers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...*labels.Matcher) annotations.Annotations); ok {
		r1 = rf(ctx, matchers...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(annotations.Annotations)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, ...*labels.Matcher) error); ok {
		r2 = rf(ctx, matchers...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LabelValues provides a mock function with given fields: ctx, name, matchers
func (_m *StorageQuerierInterface) LabelValues(ctx context.Context, name string, matchers ...*labels.Matcher) ([]string, annotations.Annotations, error) {
	_va := make([]interface{}, len(matchers))
	for _i := range matchers {
		_va[_i] = matchers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LabelValues")
	}

	var r0 []string
	var r1 annotations.Annotations
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*labels.Matcher) ([]string, annotations.Annotations, error)); ok {
		return rf(ctx, name, matchers...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...*labels.Matcher) []string); ok {
		r0 = rf(ctx, name, matchers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...*labels.Matcher) annotations.Annotations); ok {
		r1 = rf(ctx, name, matchers...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(annotations.Annotations)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, ...*labels.Matcher) error); ok {
		r2 = rf(ctx, name, matchers...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Select provides a mock function with given fields: ctx, sortSeries, hints, matchers
func (_m *StorageQuerierInterface) Select(ctx context.Context, sortSeries bool, hints *storage.SelectHints, matchers ...*labels.Matcher) storage.SeriesSet {
	_va := make([]interface{}, len(matchers))
	for _i := range matchers {
		_va[_i] = matchers[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, sortSeries, hints)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 storage.SeriesSet
	if rf, ok := ret.Get(0).(func(context.Context, bool, *storage.SelectHints, ...*labels.Matcher) storage.SeriesSet); ok {
		r0 = rf(ctx, sortSeries, hints, matchers...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.SeriesSet)
		}
	}

	return r0
}

// Series provides a mock function with given fields: ctx, labelMatchers
func (_m *StorageQuerierInterface) Series(ctx context.Context, labelMatchers []string) ([]map[string]string, error) {
	ret := _m.Called(ctx, labelMatchers)

	if len(ret) == 0 {
		panic("no return value specified for Series")
	}

	var r0 []map[string]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]map[string]string, error)); ok {
		return rf(ctx, labelMatchers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []map[string]string); ok {
		r0 = rf(ctx, labelMatchers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, labelMatchers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorageQuerierInterface creates a new instance of StorageQuerierInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageQuerierInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageQuerierInterface {
	mock := &StorageQuerierInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
